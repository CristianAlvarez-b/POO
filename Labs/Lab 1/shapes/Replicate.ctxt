#BlueJ class context
comment0.target=Replicate
comment0.text=\r\n\ A\ set\ of\ hexagonal\ cells\ which\ replicate\ a\ painted\ area.\r\n\r\n\ @author\ Cristian\ Alvarez\ and\ Juliana\ Brice\u00F1o\r\n\ @version\ 1.0\ (30\ August\ 2023)\r\n
comment1.params=rows\ columns
comment1.target=Replicate(int,\ int)
comment1.text=\r\n\ Constructor\ of\ the\ replicate\ table\ with\ a\ random\ painted\ cell.\r\n\ @param\ rows\ is\ the\ number\ of\ rows\ of\ the\ board.\ Max\ 10\ rows.\r\n\ @param\ columns\ is\ the\ number\ of\ columns\ of\ the\ board.\ Max\ 10\ columns.\r\n
comment10.params=matrix
comment10.target=void\ updateBoard(int[][])
comment10.text=\r\n\ Change\ the\ board\ according\ to\ the\ state\ matrix\r\n\ @param\ matrix\ that\ is\ the\ state\ matrix.\r\n
comment11.params=
comment11.target=void\ reflectHorizontal()
comment11.text=\r\n\ Reflect\ horizontality\ the\ current\ board.\r\n
comment12.params=
comment12.target=void\ reflectVertical()
comment12.text=\r\n\ Reflect\ verticaly\ the\ current\ board.\r\n
comment2.params=rows\ columns\ xPositionPainted\ yPositionPainted
comment2.target=Replicate(int,\ int,\ int,\ int)
comment2.text=\r\n\ Constructor\ of\ the\ replicate\ table\ with\ a\ given\ painted\ cell.\r\n\ @param\ rows\ is\ the\ number\ of\ rows\ of\ the\ board.\r\n\ @param\ columns\ is\ the\ number\ of\ columns\ of\ the\ board.\r\n\ @param\ xPositionPainted\ is\ the\ specific\ row\ of\ hexagon\ that\ will\ be\ paint.\r\n\ @param\ yPositionPainted\ is\ the\ specific\ column\ of\ hexagon\ that\ will\ be\ paint.\r\n
comment3.params=xPosition\ yPosition\ check
comment3.target=void\ changeColor(int,\ int,\ boolean)
comment3.text=\r\n\ Change\ de\ color\ of\ a\ specific\ Hexagon\r\n\ @param\ xPosition\ is\ the\ row\ of\ the\ hexagon\ to\ be\ changed.\r\n\ @param\ xPosition\ is\ the\ row\ to\ be\ update\r\n\ @param\ yPosition\ is\ the\ column\ to\ be\ update\r\n\ @param\ check\ is\ the\ condition\ to\ validate\ the\ new\ state.\r\n
comment4.params=xPosition\ yPosition\ check
comment4.target=void\ updateState(int,\ int,\ boolean)
comment4.text=\r\n\ update\ the\ MatrixState\r\n\ @param\ xPosition\ is\ the\ row\ to\ be\ update\r\n\ @param\ yPosition\ is\ the\ column\ to\ be\ update\r\n\ @param\ check\ is\ the\ condition\ to\ validate\ the\ new\ state.\r\n
comment5.params=
comment5.target=void\ printStateMatrix()
comment5.text=\r\n\ Print\ the\ actual\ state\ of\ the\ StateMatrix\r\n
comment6.params=matrix\ xPos\ yPos
comment6.target=int\ sumAdjacentCells(int[][],\ int,\ int)
comment6.text=\r\n\ Function\ that\ return\ the\ sum\ of\ the\ adjacentcells\ of\ a\ specific\ cell\r\n\ @param\ matrix\ that\ be\ analized\r\n\ @param\ xPos\ row\ to\ analized\r\n\ @param\ yPos\ column\ to\ analized\r\n
comment7.params=
comment7.target=void\ replicate()
comment7.text=\r\n\ In\ a\ sequence\ of\ discrete\ steps,\ each\ cell\ in\ the\ network\ simultaneously\ updates\ its\ state\ by\ examining\ \r\n\ its\ own\ state\ and\ those\ of\ its\ adjacent\ neighbors.\r\n\ If\ it\ counts\ an\ odd\ number\ of\ these\ neighboring\ cells\ that\ are\ full,\ \r\n\ the\ next\ state\ of\ the\ cell\ will\ be\ full;\ otherwise,\ it\ will\ be\ empty.\r\n
comment8.params=matrix
comment8.target=void\ invertColumns(int[][])
comment8.text=\r\n\ invert\ the\ columns\ of\ a\ matrix\r\n\ @param\ matrix\ to\ be\ inverted\r\n
comment9.params=matrix
comment9.target=void\ invertRows(int[][])
comment9.text=\r\n\ invert\ the\ rows\ of\ a\ matrix\r\n\ @param\ matrix\ to\ be\ inverted\r\n
numComments=13
